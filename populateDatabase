#!/bin/bash
#
# Copyright 2018 Jérôme Gasperi
#
# Licensed under the Apache License, version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

####### DO NOT TOUCH THIS ######
ENV_FILE=./config.env
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'
MYPWD=$(pwd)
CONTACT="jerome.gasperi@gmail.com"
################################

# Force script to exit on error
set -e
err_report() {
    echo -e "${RED}[ERROR] Error on line $1 - see errors.log file${NC}"
}
trap 'err_report $LINENO' ERR

function showUsage {
    echo -e ""
    echo -e "   Populate an empty itag database"
    echo -e ""
    echo -e "   Usage $0 [options]"
    echo -e ""
    echo -e "   Options:"
    echo -e ""
    echo -e "      -e | --envfile Environnement file (default is ${GREEN}config.env${NC})"
    echo -e "      -h | --help show this help"
    echo -e ""
    echo -e "      !!! This script requires docker and docker-compose !!!"
    echo -e ""
}

# Parsing arguments
TARGET=""
while (( "$#" ));
do
	case "$1" in
        -e|--envfile)
            if [[ "$2" == "" || ${2:0:1} == "-" ]]; then
                showUsage
                echo -e "${RED}[ERROR] Missing config file name${NC}"
                echo -e ""
                exit 1
            fi
            ENV_FILE="$2"
            shift 2 # past argument
            ;;
        -h|--help)
            showUsage
            shift # past argument
            exit 0
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            showUsage
            echo -e "${RED}[ERROR] Unsupported flag $1${NC}"
            echo -e ""
            exit 1
            ;;
	esac
done

#
# The environement file is mandatory
# It contains all configuration to build and run itag images
#
if [[ ! -f ${ENV_FILE} ]]; then
    showUsage
    echo -e "${RED}[ERROR] The \"${ENV_FILE}\" file does not exist!${NC}"
    echo ""
    exit 0
fi

ITAG_DATABASE_EXPOSED_PORT=$(grep ^ITAG_DATABASE_EXPOSED_PORT= ${ENV_FILE} | awk -F= '{print $2}')
ITAG_DATABASE_USER_PASSWORD=$(grep ^ITAG_DATABASE_USER_PASSWORD= ${ENV_FILE} | awk -F= '{print $2}')
ITAG_DATABASE_USER_NAME=$(grep ^ITAG_DATABASE_USER_NAME= ${ENV_FILE} | awk -F= '{print $2}')
ITAG_DATABASE_NAME=$(grep ^ITAG_DATABASE_NAME= ${ENV_FILE} | awk -F= '{print $2}')
ITAG_DATABASE_HOST=$(grep ^ITAG_DATABASE_HOST= ${ENV_FILE} | awk -F= '{print $2}')
GPW_DATASOURCE_URL=$(grep ^GPW_DATASOURCE_URL= ${ENV_FILE} | awk -F= '{print $2}')
LANDCOVER_DATASOURCE_URL=$(grep ^LANDCOVER_DATASOURCE_URL= ${ENV_FILE} | awk -F= '{print $2}')

if [ "${ITAG_DATABASE_HOST}" == "itagdb" ] || [ "${ITAG_DATABASE_HOST}" == "host.docker.internal" ]; then
    DATABASE_HOST_SEEN_FROM_DOCKERHOST=localhost
else
    DATABASE_HOST_SEEN_FROM_DOCKERHOST=${ITAG_DATABASE_HOST}
fi

# Wait for database to be ready
echo -e "[INFO] Waiting for database port ${DATABASE_HOST_SEEN_FROM_DOCKERHOST}:${ITAG_DATABASE_EXPOSED_PORT} to be ready..."
while ! PGPASSWORD=${ITAG_DATABASE_USER_PASSWORD} pg_isready -h ${DATABASE_HOST_SEEN_FROM_DOCKERHOST} -p "${ITAG_DATABASE_EXPOSED_PORT}" -U "${ITAG_DATABASE_USER_NAME}" -d "${ITAG_DATABASE_NAME}" 2>/dev/null
do
    let elapsed=elapsed+1
    if [ "$elapsed" -gt 90 ] 
    then
        echo -e "${RED}[ERROR]${NC} Database startup timed out =("
        exit 0
    fi  
    sleep 1;
done

echo -e "${YELLOW}[INFO] Installing datasources${NC}"
./scripts/installDatasources.sh -e ${ENV_FILE} -d ${MYPWD}/data
./scripts/updateDatasourcesWithGeoname.sh -e ${ENV_FILE} -d ${MYPWD}/sql

if [ "${GPW_DATASOURCE_URL}" != "" ]; then
    echo -e "${YELLOW}[INFO] Installing population grids${NC}"
    ./scripts/installGPW.sh -e ${ENV_FILE} -d ${MYPWD}/data
else
    echo -e "[INFO] Population density is not available - contact ${YELLOW}${CONTACT}${NC} if you need it"
fi

if [ "${LANDCOVER_DATASOURCE_URL}" != "" ]; then
    echo -e "${YELLOW}[INFO] Installing landcover${NC}"
    ./scripts/installLandcover.sh -e ${ENV_FILE} -d ${MYPWD}/data
else
    echo -e "[INFO] Landcover is not available - contact ${YELLOW}${CONTACT}${NC} if you need it"
fi

echo ""
